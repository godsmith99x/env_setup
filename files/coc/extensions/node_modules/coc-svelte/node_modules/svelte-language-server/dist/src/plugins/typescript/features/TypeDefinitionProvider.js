"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeDefinitionProviderImpl = void 0;
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const documents_1 = require("../../../lib/documents");
const utils_1 = require("../../../utils");
const utils_2 = require("../utils");
const utils_3 = require("./utils");
class TypeDefinitionProviderImpl {
    constructor(lsAndTsDocResolver) {
        this.lsAndTsDocResolver = lsAndTsDocResolver;
    }
    async getTypeDefinition(document, position) {
        const { tsDoc, lang } = await this.lsAndTsDocResolver.getLSAndTSDoc(document);
        const mainFragment = await tsDoc.getFragment();
        const offset = mainFragment.offsetAt(mainFragment.getGeneratedPosition(position));
        const typeDefs = lang.getTypeDefinitionAtPosition(tsDoc.filePath, offset);
        const docs = new utils_3.SnapshotFragmentMap(this.lsAndTsDocResolver);
        docs.set(tsDoc.filePath, { fragment: mainFragment, snapshot: tsDoc });
        if (!typeDefs) {
            return null;
        }
        const result = await Promise.all(typeDefs.map(async (typeDef) => {
            const { fragment, snapshot } = await docs.retrieve(typeDef.fileName);
            if (!(0, utils_3.isNoTextSpanInGeneratedCode)(snapshot.getFullText(), typeDef.textSpan)) {
                return;
            }
            const range = (0, documents_1.mapRangeToOriginal)(fragment, (0, utils_2.convertRange)(fragment, typeDef.textSpan));
            if (range.start.line >= 0 && range.end.line >= 0) {
                return vscode_languageserver_protocol_1.Location.create((0, utils_1.pathToUrl)(typeDef.fileName), range);
            }
        }));
        return result.filter(utils_1.isNotNullOrUndefined);
    }
}
exports.TypeDefinitionProviderImpl = TypeDefinitionProviderImpl;
//# sourceMappingURL=TypeDefinitionProvider.js.map